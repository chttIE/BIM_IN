# -*- coding: utf-8 -*-
__title__ = "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø.\n–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
__author__ = "IliaNistratov"
__doc__ = "–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –≤ –º–æ–¥–µ–ª–∏"

from Autodesk.Revit.DB import *
from pyrevit import script, forms, revit

doc = __revit__.ActiveUIDocument.Document
output = script.get_output()
lfy = output.linkify
output.close_others(all_open_outputs=True)
# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
binding_map = doc.ParameterBindings
it = binding_map.ForwardIterator()
it.Reset()

unused_params = {}
param_def_map = {}
shared_param_names = set()

while it.MoveNext():
    definition = it.Key
    param_def_map[definition.Name] = definition
    unused_params[definition.Name] = {
        "definition": definition,
        "used_in_elements": False,
        "used_in_filters": False,
        "used_in_schedules": False
    }

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ ParameterElement
all_param_elements = FilteredElementCollector(doc).OfClass(ParameterElement).ToElements()
for pe in all_param_elements:
    definition = pe.GetDefinition()
    if isinstance(pe,SharedParameterElement):
        shared_param_names.add(pe.Name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
collector = FilteredElementCollector(doc).WhereElementIsNotElementType()
for el in collector:
    for param in el.Parameters:
        try:
            name = param.Definition.Name
            if name in unused_params:
                if param.HasValue and (param.AsString() or param.AsValueString() or param.AsInteger() or param.AsDouble()):
                    unused_params[name]["used_in_elements"] = True
        except:
            continue

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ "–°–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
project_info = doc.ProjectInformation
for param in project_info.Parameters:
    try:
        name = param.Definition.Name
        if name in unused_params:
            if param.HasValue and (param.AsString() or param.AsValueString() or param.AsInteger() or param.AsDouble()):
                unused_params[name]["used_in_elements"] = True
    except:
        continue


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö


def get_Filters(filter_elem):
    try:
        return filter_elem.GetElementFilter().GetFilters()
    except:
        return None

def get_rules(flt):
    try:
        return flt.GetRules()
    except: 
        return []

def get_param_rule(rule, doc):
    try:
        param_id = rule.GetRuleParameter()
        if param_id.IntegerValue < 0:
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            return LabelUtils.GetLabelFor(BuiltInParameter(param_id.IntegerValue))
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            elem = doc.GetElement(param_id)
            return elem.Name if elem else "UNKNOWN"
    except:
        return "ERROR"


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filters = FilteredElementCollector(doc).OfClass(ParameterFilterElement).ToElements()

for filter_elem in filters:
    inner_filters = get_Filters(filter_elem)
    if not inner_filters:
        continue

    for flt in inner_filters:
        rules = get_rules(flt)
        for rule in rules:
            pname = get_param_rule(rule, doc)
            if pname in unused_params:
                unused_params[pname]["used_in_filters"] = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
schedules = FilteredElementCollector(doc).OfClass(ViewSchedule).ToElements()
for sched in schedules:
    # print(lfy(sched.Id))
    try:
        definition = sched.Definition
        for field_id in definition.GetFieldOrder():
            field = definition.GetField(field_id)
            pname = field.GetName()
            # print(pname)
            if pname in unused_params:
                unused_params[pname]["used_in_schedules"] = True
    except:
        continue

# –°–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö
unused_names = [name for name, data in unused_params.items()
                if not data["used_in_elements"] and not data["used_in_filters"] and not data["used_in_schedules"]]

if not unused_names:
    output.print_md("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!")
    script.exit()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º "[–û–ë–©–ò–ô]" –∫ –æ–±—â–∏–º)
display_names = []
name_map = {}  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ -> —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è

for name in sorted(unused_names):
    display = "[–û–ë–©–ò–ô] {}".format(name) if name in shared_param_names else name
    display_names.append(display)
    name_map[display] = name

# –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
selected_display_names = forms.SelectFromList.show(
    display_names,
    multiselect=True,
    title='–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
    width=450,
    height=800,
    button_name='–£–¥–∞–ª–∏—Ç—å'
)

if not selected_display_names:
    script.exit()

# –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ doc.Delete
error_list = []
deleted = []

with Transaction(doc, "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤") as t:
    t.Start()
    for display_name in selected_display_names:
        pname = name_map[display_name]

        # –ó–∞–Ω–æ–≤–æ –∏—â–µ–º ParameterElement –ø–æ –∏–º–µ–Ω–∏ (—Ç.–∫. –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã)
        param_elem = next(
            (pe for pe in FilteredElementCollector(doc).OfClass(ParameterElement).ToElements()
             if pe.Name == pname),
            None
        )

        if param_elem:
            try:
                doc.Delete(param_elem.Id)
                output.print_md('- üóë –£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: **{}**'.format(display_name))
                deleted.append(pname)
            except:
                error_list.append('- ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä: **{}**'.format(display_name))
        else:
            error_list.append('- ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä "{}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ParameterElement'.format(display_name))
    t.Commit()


# –û—à–∏–±–∫–∏
if error_list:
    output.print_md("## ‚ö†Ô∏è –û—à–∏–±–∫–∏:")
    for err in error_list:
        output.print_md(err)
