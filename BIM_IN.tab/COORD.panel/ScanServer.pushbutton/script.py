# -*- coding: utf-8 -*-
import codecs
import os
import os.path as op
import urllib

from rpws import RevitServer, server as rs_mod 
from pyrevit import script,forms
output = script.get_output()
output.close_others(True)

# –µ—Å–ª–∏ –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º
def ensure_rs_version(ver):
    if ver not in rs_mod.sroots:
        # –î–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –ø–æ—Å–ª–µ 2012 —à–∞–±–ª–æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π:
        # /RevitServerAdminRESTService{YYYY}/AdminRESTService.svc
        suffix = "" if ver == "2012" else ver
        rs_mod.sroots[ver] = "/RevitServerAdminRESTService{}/AdminRESTService.svc".format(suffix)

# –ø—Ä–∏–º–µ—Ä: –≤–∫–ª—é—á–∞–µ–º 2019‚Äì2024 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
for v in ("2019","2020","2021","2022","2023","2024"):
    ensure_rs_version(v)

def _get_func(f):
    # –¥–æ—Å—Ç–∞—ë–º ¬´–≥–æ–ª—É—é¬ª —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ staticmethod, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return getattr(f, '__func__', f)

def patch_rpws_api_path():
    if getattr(RevitServer, '_api_path_patched', False):
        return

    orig = _get_func(RevitServer._api_path)

    def _api_path_quoted(nodepath=None, _orig=orig, _urllib=urllib):
        apipath = _orig(nodepath)
        if isinstance(apipath, unicode):
            apipath = apipath.encode('utf-8')
        # _urllib —Ç–µ–ø–µ—Ä—å –∑–∞—Ö–≤–∞—á–µ–Ω–æ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
        return _urllib.quote(apipath, safe='|/')

    RevitServer._api_path = staticmethod(_api_path_quoted)
    RevitServer._api_path_patched = True

# –≤—ã–∑–æ–≤–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞:
patch_rpws_api_path()


def save_list_to_txt(data_list):
    """
    data_list: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ txt
    """

    # --- –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ ---
    folder_path = forms.pick_folder()
    if not folder_path:
        forms.alert("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –û—Ç–º–µ–Ω–∞.")
        return

    # --- –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ---
    file_name = forms.ask_for_string(
        prompt="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞:",
        default="–û–ë–™–ï–ö–¢1"
    )
    if not file_name:
        forms.alert("–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ. –û—Ç–º–µ–Ω–∞.")
        return

    file_path = os.path.join(folder_path, file_name + ".txt")

    # --- –ó–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ ---
    try:
        with codecs.open(file_path, "w", encoding="utf-8") as f:
            for line in data_list:
                f.write(str(line) + "\n")

        forms.alert("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n{}".format(file_path))
    except Exception as e:
        forms.alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {}".format(e))

# --- –î–∞–ª—å—à–µ –æ–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º ---


HOST = forms.ask_for_string(prompt="–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞",title="–°–∫–∞–Ω–µ—Ä")
VER = forms.ask_for_string(prompt="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é RevitServer",title="–°–∫–∞–Ω–µ—Ä",default="2022")

if not HOST or not VER: script.exit() 

try:
    rs = RevitServer(HOST, VER)
except:
    print("–£–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–≤–∏—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–∞")
    
def to_rsn(host, rel_path):
    # –≤ rsn:// –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏
    return u"rsn://{}/{}".format(host, rel_path.lstrip(u"\\").replace(u"\\", u"/"))

# –ö–æ—Ä–Ω–µ–≤—ã–µ –ø–∞–ø–∫–∏ (–í–ê–ñ–ù–û: –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ op.sep, –∞ –Ω–µ "/")
root_folders = rs.listfolders()  # = rs.listfolders(op.sep)

lst_rsn = []

for parent, folders, files, models in rs.walk(top=None, topdown=True, digmodels=False):
    if models:
        # output.print_md(u"### üìÇ –ü–∞–ø–∫–∞ `{}` ‚Äî –º–æ–¥–µ–ª–µ–π: **{}**".format(parent or u"\\", len(models)))
        for m in models:
            minfo = rs.getmodelinfo(m.path)
            rsn = to_rsn(rs.name, m.path)
            lst_rsn.append(rsn)
            print(u"{} - {} - {} - {} - {}".format(rsn, minfo.size,minfo.date_created,minfo.date_modified,minfo.last_modified_by))

if lst_rsn: save_list_to_txt(lst_rsn)